import React, {Component} from 'react';
import flvjs from './flv';
import './Video.css';


export default class Video extends Component {

  state = {
    checkboxFields: ['isLive', 'withCredentials', 'hasAudio', 'hasVideo'],
    streamURL: '',
    mediaSourceURL: '',
    msURL: '',
    sURL: {
      value: '',
    },
    checkboxs: [],
    player: null,
  };

  flv_load = () => {
    console.log('isSupported: ' + flvjs.isSupported());
    if (this.state.mediaSourceURL === '') {
      const url = this.setState.msURL;
      let xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.onload = function (e) {
          var mediaDataSource = JSON.parse(xhr.response);
          this.flv_load_mds(mediaDataSource);
      }
      xhr.send();
    } else {
        let i;
        let mediaDataSource = {
          type: 'flv',
        };
        for (i = 0; i <= this.state.checkboxFields.length; i++) {
          let field = this.state.checkBoxFields[i];
          /** @type {HTMLInputElement} */
          let checkbox = this.state.checkboxs[field];
          mediaDataSource[field] = checkbox.checked;
        }
        mediaDataSource['url'] = this.state.sURL.value;
        console.log('MediaDataSource', mediaDataSource);
        this.flv_load_mds(mediaDataSource);
    }
  };

  flv_load_mds = (mediaDataSource) => {
    let element = document.getElementsByName('videoElement')[0];
      if (typeof player !== "undefined") {
          if (this.state.player != null) {
              this.state.player.unload();
              this.state.player.detachMediaElement();
              this.state.player.destroy();
              this.setState(Object.assign({}, this.state, {player: null}));
          }
      }
    let newPlayer = flvjs.createPlayer(mediaDataSource, {
        enableWorker: false,
        lazyLoadMaxDuration: 3 * 60,
        seekType: 'range',
    });
    this.setState(Object.assign({}, this.state, {player: newPlayer}));
    this.state.player.attachMediaElement(element);
    this.state.player.load();
  };

  flv_start = () => {
      player.play();
  }

  flv_pause = () => {
      player.pause();
  }

  flv_destroy = () => {
      player.pause();
      player.unload();
      player.detachMediaElement();
      player.destroy();
      this.setState(Object.assign({}, this.state, {player: null}));
  }

  flv_seekto() {
      var input = document.getElementsByName('seekpoint')[0];
      player.currentTime = parseFloat(input.value);
  }

  function switch_url() {
      streamURL.className = '';
      mediaSourceURL.className = 'hidden';
      saveSettings();
  }

  function switch_mds() {
      streamURL.className = 'hidden';
      mediaSourceURL.className = '';
      saveSettings();
  }

  function ls_get(key, def) {
      try {
          var ret = localStorage.getItem('flvjs_demo.' + key);
          if (ret === null) {
              ret = def;
          }
          return ret;
      } catch (e) {}
      return def;
  }

  function ls_set(key, value) {
      try {
          localStorage.setItem('flvjs_demo.' + key, value);
      } catch (e) {}
  }

  function saveSettings() {
      if (mediaSourceURL.className === '') {
          ls_set('inputMode', 'MediaDataSource');
      } else {
          ls_set('inputMode', 'StreamURL');
      }
      var i;
      for (i = 0; i < checkBoxFields.length; i++) {
          var field = checkBoxFields[i];
          /** @type {HTMLInputElement} */
          var checkbox = document.getElementById(field);
          ls_set(field, checkbox.checked ? '1' : '0');
      }
      var msURL = document.getElementById('msURL');
      var sURL = document.getElementById('sURL');
      ls_set('msURL', msURL.value);
      ls_set('sURL', sURL.value);
      console.log('save');
  }

  function loadSettings() {
      var i;
      for (i = 0; i < checkBoxFields.length; i++) {
          var field = checkBoxFields[i];
          /** @type {HTMLInputElement} */
          var checkbox = document.getElementById(field);
          var c = ls_get(field, checkbox.checked ? '1' : '0');
          checkbox.checked = c === '1' ? true : false;
      }

      var msURL = document.getElementById('msURL');
      var sURL = document.getElementById('sURL');
      msURL.value = ls_get('msURL', msURL.value);
      sURL.value = ls_get('sURL', sURL.value);
      if (ls_get('inputMode', 'StreamURL') === 'StreamURL') {
          switch_url();
      } else {
          switch_mds();
      }
  }

  function showVersion() {
      var version = flvjs.version;
      document.title = document.title + " (v" + version + ")";
  }

  var logcatbox = document.getElementsByName('logcatbox')[0];
  flvjs.LoggingControl.addLogListener(function(type, str) {
      logcatbox.value = logcatbox.value + str + '\n';
      logcatbox.scrollTop = logcatbox.scrollHeight;
  });

  document.addEventListener('DOMContentLoaded', function () {
      streamURL = document.getElementById('streamURL');
      mediaSourceURL = document.getElementById('mediaSourceURL');
      loadSettings();
      showVersion();
      flv_load();
  });

  render() {
    return (
      <div
        id="about"
        style={{ marginTop: "6.63%", backgroundColor: "#FCFAF2", }}
      >

        <div className="mainContainer">
          <div>
            <div id="streamURL">
              <div className="url-input">
                <label for="sURL">Stream URL:</label>
                <input id="sURL" type="text" value="https://jsedu.gitee.io/fifty_tone.flv" />
                <button onclick="switch_mds()">Switch to MediaDataSource</button>
              </div>
              <div className="options">
                <input type="checkbox" id="isLive" onchange="saveSettings()" />
                <label for="isLive">isLive</label>
                <input type="checkbox" id="withCredentials" onchange="saveSettings()" />
                <label for="withCredentials">withCredentials</label>
                <input type="checkbox" id="hasAudio" onchange="saveSettings()" checked />
                <label for="hasAudio">hasAudio</label>
                <input type="checkbox" id="hasVideo" onchange="saveSettings()" checked />
                <label for="hasVideo">hasVideo</label>
              </div>
            </div>
            <div id="mediaSourceURL" className="hidden">
              <div className="url-input">
                <label for="msURL">MediaDataSource JsonURL:</label>
                <input id="msURL" type="text" value="http://127.0.0.1/flv/7182741.json" />
                <button onclick="switch_url()">Switch to URL</button>
              </div>
            </div>
          </div>
          <div className="video-container">
            <div>
              <video name="videoElement" className="centeredVideo" controls autoplay>
                Your browser is too old which does not support HTML5 video.
              </video>
            </div>
          </div>
          <div className="controls">
            <button onClick="flv_load()">加载</button>
            <button onClick="flv_start()">开始</button>
            <button onClick="flv_pause()">停止</button>
            <button onClick="flv_destroy()">结束</button>
            <input style={{width:'100px',}} type="text" name="seekpoint"/>
            <button onClick="flv_seekto()">寻找</button>
          </div>
          <textarea name="logcatbox" className="logcatBox" rows="10" readonly></textarea>
        </div>

      </div>        
    );
  }
}